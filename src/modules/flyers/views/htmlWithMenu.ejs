<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Image</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css"/>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
        }

        h1 {
            text-align: center;
        }

        .menu-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 4px; /* Espaço entre os itens */
        }

        .menu-item {
            display: flex;
            flex-direction: column; /* Coloca o texto acima do combo */
            align-items: center;
            font-size: 18px;
            margin-top: 5px;
            background-color: #3a0382; /* Background color for buttons */
            color: #FFFFFF; /* Text color */
            border-radius: 5px;
            padding: 5px;
            width: calc(50% - 8px); /* Define a largura para caber dois por linha */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .menu-item span {
            margin-bottom: 10px;
        }

        .menu-item select {
            font-size: 18px;
            padding: 10px;
            background-color: #FFFFFF; /* Background color for select */
            color: #3a0382; /* Text color for select */
            border: none;
            border-radius: 5px;
            width: 100%; /* Largura total do select */
        }

        .badge {
            padding: 10px;
            border-radius: 5px;
            color: #fff;
            display: inline-block;
            margin: 10px 0;
        }

        img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 0 auto;
        }

        /* Media queries for smaller screens */
        @media (max-width: 600px) {
            .menu-item {
                width: calc(40% - 8px); /* Ajusta a largura para caber dois por linha em telas menores */
                padding: 5px; /* Reduz o padding para economizar espaço */
                margin-top: 5px; /* Reduz o espaço superior */
                margin-bottom: 5px; 
            }

            .menu-item select {
                padding: 5px; /* Reduz o padding interno do select */
                font-size: 14px; /* Reduz o tamanho da fonte */
            }

            h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="menu-container">
        <div class="menu-item">
            <span>Fonte Preço:</span>
            <select id="priceSelect" onchange="updateProductPrice()">
                <option value="10" <% if (flyersData.size_price == 10) { %> selected <% } %>>10</option>
                <option value="20" <% if (flyersData.size_price == 20) { %> selected <% } %>>20</option>
                <option value="30" <% if (flyersData.size_price == 30) { %> selected <% } %>>30</option>
                <option value="40" <% if (flyersData.size_price == 40) { %> selected <% } %>>40</option>
                <option value="50" <% if (flyersData.size_price == 50) { %> selected <% } %>>50</option>
                <option value="70" <% if (flyersData.size_price == 70) { %> selected <% } %>>70</option>
                <option value="80" <% if (flyersData.size_price == 80) { %> selected <% } %>>80</option>
                <option value="90" <% if (flyersData.size_price == 90) { %> selected <% } %>>90</option>
                <option value="120" <% if (flyersData.size_price == 120) { %> selected <% } %>>120</option>
                <option value="150" <% if (flyersData.size_price == 150) { %> selected <% } %>>150</option>
            </select>
        </div>

        <div class="menu-item">
            <span>Fonte Produto:</span>
            <select>
                <option value="1">Opção 1</option>
                <option value="2">Opção 2</option>
                <option value="3">Opção 3</option>
            </select>
        </div>

        <div class="menu-item">
            <span>Fonte Textos:</span>
            <select>
                <option value="1">Opção 1</option>
                <option value="2">Opção 2</option>
                <option value="3">Opção 3</option>
            </select>
        </div>

        <div class="menu-item">
            <span>Cor Fonte Textos:</span>
            <div id="productColorPicker" class="color-picker"></div>
        </div>
        
        <div class="menu-item">
            <span>Cor Tag Preço:</span>
            <div id="priceTagColorPicker" class="color-picker"></div>
        </div>
        <div class="menu-item">
            <span>Cor Fundo:</span>
            <div id="backgroundCollorPost" class="color-picker"></div>
        </div>
        <div class="menu-item">
            <span>Cor Textos:</span>
            <div id="textCollors" class="color-picker"></div>
        </div>

        
    </div>

    <img src="<%= imageSrc %>" alt="Generated Image">

    <script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const priceSelect = document.getElementById('priceSelect');
            const initialPrice = priceSelect.value;

            priceSelect.addEventListener('change', function() {
                if (priceSelect.value !== initialPrice) {
                    updateProductPrice();
                }
            });

            // Inicializando os Pickr para cada color picker
            const productColorPicker = Pickr.create({
                el: '#productColorPicker',
                theme: 'classic', // 'classic', 'monolith', 'nano'
                default: '#000000',
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                    interaction: {
                        hex: true,
                        rgba: true,
                        input: true,
                        clear: true,
                        save: true
                    }
                }
            });

            const priceTagColorPicker = Pickr.create({
                el: '#priceTagColorPicker',
                theme: 'classic', // 'classic', 'monolith', 'nano'
                default: '#ff0000',
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                    interaction: {
                        hex: true,
                        rgba: true,
                        input: true,
                        clear: true,
                        save: true
                    }
                }
            });

            const backgroundCollorPost = Pickr.create({
                el: '#backgroundCollorPost',
                theme: 'classic', // 'classic', 'monolith', 'nano'
                default: '#ff0000',
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                    interaction: {
                        hex: true,
                        rgba: true,
                        input: true,
                        clear: true,
                        save: true
                    }
                }
            });

            const textCollors = Pickr.create({
                el: '#textCollors',
                theme: 'classic', // 'classic', 'monolith', 'nano'
                default: '#ff0000',
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                    interaction: {
                        hex: true,
                        rgba: true,
                        input: true,
                        clear: true,
                        save: true
                    }
                }
            });

            productColorPicker.on('change', (color) => {
                const rgbaColor = color.toHEXA().toString();
                // Atualize a cor da fonte do produto aqui
                console.log('Cor Fonte Produto:', rgbaColor);
                sendRequest(rgbaColor, "PRODUCT_COLLOR");
                

            });

            priceTagColorPicker.on('change', (color) => {
                const rgbaColor = color.toHEXA().toString();
                // Atualize a cor da tag de preço aqui
                console.log('Cor Tag Preço:', rgbaColor);
                sendRequest(rgbaColor, "TAG_PRODUCT_COLLOR");

            });

            
            backgroundCollorPost.on('change', (color) => {
                const rgbaColor = color.toHEXA().toString();
                // Atualize a cor da tag de preço aqui
                console.log('Cor Tag Preço:', rgbaColor);
                sendRequest(rgbaColor, "BACKGROUND_COLLOR_POST");

            });

            textCollors.on('change', (color) => {
                const rgbaColor = color.toHEXA().toString();
                // Atualize a cor da tag de preço aqui
                console.log('Cor Tag Preço:', rgbaColor);
                sendRequest(rgbaColor, "TEXT_COLLORS");

            });


        });

        function updateProductPrice() {
            console.log("######################### updatePrice")
            const price = document.getElementById('priceSelect').value;
            sendRequest(price, "SIZE_PRICE");
        }

        function sendRequest (valor, type) {
            console.log("chamou"+valor)
            const idFlyer = '<%= idFlyer %>';
            const url = `/publish/flyer/updateTemplate/${idFlyer}/${encodeURIComponent(valor)}/${type}`;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }) 
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Preço atualizado com sucesso!');
                } else {
                    alert('Falha ao atualizar o preço.');
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Ocorreu um erro ao atualizar o preço.');
            });
        }
    </script>
</body>
</html>
